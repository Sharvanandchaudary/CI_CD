name: Zephyr CI DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk

    steps:
    # ⬇️ Checkout Source
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # ⚙️ Install core dependencies
    - name: Install system dependencies
      run: |
        sudo apt update && sudo apt install -y \
          git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget \
          python3-dev python3-pip python3-setuptools python3-wheel file make \
          gcc g++ xz-utils libsdl2-dev xterm curl qemu-system-arm jq

    # 💾 Cache Python packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # 💾 Cache Zephyr SDK
    - name: Cache Zephyr SDK
      id: cache-zephyr-sdk
      uses: actions/cache@v3
      with:
        path: /opt/toolchains/zephyr-sdk
        key: zephyr-sdk-0.16.3

    # 💾 Cache west modules
    - name: Cache Zephyr west modules
      uses: actions/cache@v3
      with:
        path: |
          .west
          modules
          zephyr
        key: ${{ runner.os }}-west-${{ hashFiles('**/west.yml') }}
        restore-keys: |
          ${{ runner.os }}-west-

    # 📆 Install Zephyr SDK if not cached
    - name: Install Zephyr SDK (if not cached)
      if: steps.cache-zephyr-sdk.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p /opt/toolchains
        wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.3/zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        tar -xf zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        sudo mv zephyr-sdk-0.16.3 /opt/toolchains/zephyr-sdk
        /opt/toolchains/zephyr-sdk/setup.sh -t all -c

    # 🧠 Setup Zephyr workspace & environment
    - name: Setup Zephyr environment
      run: |
        pip3 install --user west
        export PATH=$HOME/.local/bin:$PATH
        west init
        west update
        west zephyr-export
        pip3 install --user -r zephyr/scripts/requirements.txt
        west config build.board qemu_cortex_m3

    # ⚙️ Build firmware
    - name: Build hello_world firmware
      run: |
        export PATH=$HOME/.local/bin:$PATH
        west build -b qemu_cortex_m3 app/hello_world -p always

    # 🧪 Simulate & test UART output
    - name: Simulate and test UART output
      run: |
        export PATH=$HOME/.local/bin:$PATH
        cd build
        timeout 10s ninja run > output.log || true
        echo "Checking UART output:"
        grep "Hello World" output.log || (
          echo "[FAIL] UART output not found."
          cat output.log
          exit 1
        )

    # 🧾 Generate build metadata
    - name: Generate metadata
      run: |
        echo "{" > metadata.json
        echo "  \"git_sha\": \"$(git rev-parse HEAD)\"," >> metadata.json
        echo "  \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" >> metadata.json
        echo "}" >> metadata.json
        cat metadata.json

    # 📜 Generate SPDX SBOM
    - name: Generate SPDX SBOM
      run: |
        pip3 install --user spdx-tools
        export PATH=$HOME/.local/bin:$PATH
        python3 scripts/generate_spdx.py metadata.json > spdx-sbom.json

    # 🧪 Validate SPDX SBOM
    - name: Validate SPDX SBOM
      run: |
        pip3 install --user jsonschema
        export PATH=$HOME/.local/bin:$PATH
        python3 -c 'import json, jsonschema; jsonschema.validate(json.load(open("spdx-sbom.json")), {"$schema": "https://json-schema.org/draft/2020-12/schema"})'

    # 📎 Upload UART log artifact
    - name: Upload UART log artifact
      uses: actions/upload-artifact@v3
      with:
        name: uart-output-log
        path: build/output.log

    # 📎 Upload metadata and SPDX SBOM
    - name: Upload traceability artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-traceability
        path: |
          metadata.json
          spdx-sbom.json
