name: Zephyr CI DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [qemu_cortex_m0, qemu_cortex_m3, qemu_cortex_m4]

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt update && sudo apt install -y \
          git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget \
          python3-dev python3-pip python3-setuptools python3-wheel file make \
          gcc g++ xz-utils libsdl2-dev xterm curl qemu-system-arm

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Zephyr SDK
      id: cache-zephyr-sdk
      uses: actions/cache@v3
      with:
        path: /opt/toolchains/zephyr-sdk
        key: zephyr-sdk-0.16.3

    - name: Cache Zephyr west modules
      uses: actions/cache@v3
      with:
        path: |
          .west
          modules
          zephyr
        key: ${{ runner.os }}-west-${{ hashFiles('**/west.yml') }}
        restore-keys: |
          ${{ runner.os }}-west-

    - name: Install Zephyr SDK (if not cached)
      if: steps.cache-zephyr-sdk.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p /opt/toolchains
        wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.3/zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        tar -xf zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        sudo mv zephyr-sdk-0.16.3 /opt/toolchains/zephyr-sdk
        /opt/toolchains/zephyr-sdk/setup.sh -t all -c

    - name: Setup Zephyr environment
      run: |
        pip3 install --user west
        export PATH=$HOME/.local/bin:$PATH
        if [ ! -f .west/config ]; then west init; fi
        west update
        west zephyr-export
        pip3 install --user -r zephyr/scripts/requirements.txt
        west config build.board ${{ matrix.board }}

    - name: Build firmware
      run: |
        export PATH=$HOME/.local/bin:$PATH
        west build -b ${{ matrix.board }} app/hello_world -p always

    - name: Simulate and test UART output with rollback
      run: |
        export PATH=$HOME/.local/bin:$PATH
        cd build
        timeout 10s ninja run > output.log || true

        echo "Checking UART output:"
        if ! grep "Hello World" output.log; then
          echo "[FAIL] UART output not found. Triggering rollback..."
          echo "Rolling back build due to test failure"
          # Place rollback steps here, e.g., revert to previous release or commit
          exit 1
        fi

    - name: Upload UART log artifact
      uses: actions/upload-artifact@v4
      with:
        name: uart-output-log-${{ matrix.board }}
        path: build/output.log

    - name: Generate firmware Git metadata
      run: |
        python3 scripts/generate_metadata.py

    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate SPDX SBOM
      run: |
        syft dir:build -o spdx-json > build/sbom.spdx.json

    - name: Validate SPDX JSON
      run: |
        jq . build/sbom.spdx.json > /dev/null || (echo "Invalid SPDX JSON" && exit 1)

    - name: Compute SHA256 Checksum
      run: |
        sha256sum build/zephyr/zephyr.elf > build/firmware.sha256

    - name: Upload metadata and SBOM
      uses: actions/upload-artifact@v4
      with:
        name: traceability-files-${{ matrix.board }}
        path: |
          build/firmware_metadata.json
          build/sbom.spdx.json
          build/firmware.sha256

    - name: Display Traceability Info in Logs
      run: |
        echo "üîç Firmware Traceability Information:"
        echo "Git SHA: $(git rev-parse HEAD)"
        echo "Git Description: $(git describe --always --tags --dirty || echo 'N/A')"
        echo "Build Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "SHA256 Checksum:"
        cat build/firmware.sha256 || echo "Checksum file not found"
