name: Zephyr CI DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      ZEPHYR_TOOLCHAIN_VARIANT: zephyr
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk

    steps:
    # ‚¨áÔ∏è Checkout Source
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # ‚öôÔ∏è Install core dependencies
    - name: Install system dependencies
      run: |
        sudo apt update && sudo apt install -y \
          git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget \
          python3-dev python3-pip python3-setuptools python3-wheel file make \
          gcc g++ xz-utils libsdl2-dev xterm curl

    # üíæ Cache Python packages
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # üíæ Cache Zephyr SDK
    - name: Cache Zephyr SDK
      id: cache-zephyr-sdk
      uses: actions/cache@v3
      with:
        path: /opt/toolchains/zephyr-sdk
        key: zephyr-sdk-0.16.3

    # üíæ Cache west modules
    - name: Cache Zephyr west modules
      uses: actions/cache@v3
      with:
        path: |
          .west
          modules
          zephyr
        key: ${{ runner.os }}-west-${{ hashFiles('**/west.yml') }}
        restore-keys: |
          ${{ runner.os }}-west-

    # üì¶ Install Zephyr SDK if not cached
    - name: Install Zephyr SDK (if not cached)
      if: steps.cache-zephyr-sdk.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p /opt/toolchains
        wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.3/zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        tar -xf zephyr-sdk-0.16.3_linux-x86_64.tar.xz
        sudo mv zephyr-sdk-0.16.3 /opt/toolchains/zephyr-sdk
        /opt/toolchains/zephyr-sdk/setup.sh -t all -c

    # üß† Setup Zephyr workspace & environment
    - name: Setup Zephyr environment
      run: |
        pip3 install --user west
        export PATH=$HOME/.local/bin:$PATH
        west init 
        west update
        west zephyr-export
        pip3 install --user -r zephyr/scripts/requirements.txt
        west config build.board qemu_cortex_m3

    # ‚öôÔ∏è Build firmware
    - name: Build hello_world firmware
      run: |
        export PATH=$HOME/.local/bin:$PATH
        west build -b qemu_cortex_m3 app/hello_world -p always

    # üß™ Simulate & test UART output
    - name: Simulate and test UART output
      run: |
        export PATH=$HOME/.local/bin:$PATH
        west build -t run \
          --build-dir build | tee build/output.log

        echo "Checking UART output:"
        grep "Hello World" build/output.log || (
          echo "[FAIL] UART output not found."
          cat build/output.log
          exit 1
        )

